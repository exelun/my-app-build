{"version":3,"sources":["components/signup.component.js","components/header.component.js","App.js","serviceWorker.js","index.js"],"names":["validEmailRegex","RegExp","validPasswordRegex","SignUp","props","handleChange","event","preventDefault","target","name","value","errors","state","setState","firstName","length","lastName","email","test","password","passwordConfirm","handleSubmit","Object","values","forEach","error","errorsCount","window","open","formValid","this","onSubmit","noValidate","className","type","placeholder","onChange","htmlFor","Component","Header","to","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f105221b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nlet validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\nlet validPasswordRegex = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,64}$/);\n\nexport default class SignUp extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          firstName: '',\n          lastName: '',\n          password: '',\n          passwordConfirm: '',\n          formValid: false,\n          errors: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            passwordConfirm: ''\n          }\n        };\n      }\n\n\n    handleChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n        let errors = this.state.errors;\n      \n        switch (name) {\n          case 'firstName': \n          this.setState({firstName: value});\n          errors.firstName = value.length > 0\n              ? ''\n              : 'First Name is required';\n          break;\n          case 'lastName': \n          this.setState({lastName: value});\n          errors.lastName = value.length > 0\n              ? ''\n              : 'Last Name is required';\n          break;\n          case 'email': \n            errors.email = \n              validEmailRegex.test(value)\n                ? ''\n                : 'Email is not valid!';\n            break;\n          case 'password': \n            this.setState({password: value});\n            errors.password = \n              validPasswordRegex.test(value)\n                ? ''\n                : 'Password must contain 8-64 characters at least 1 Uppercase, 1 Lowercase and 1 Number';\n                errors.passwordConfirm = \n                value !== this.state.passwordConfirm\n                  ? 'Passwords does not match'\n                  : '';\n            break;\n            case 'passwordConfirm': \n            this.setState({passwordConfirm: value});\n            errors.passwordConfirm = \n              value !== this.state.password\n                ? 'Passwords does not match'\n                : '';\n            break;\n          default:\n            break;\n        }\n      \n        this.setState({errors, [name]: value});\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        let errorsCount = 0;\n        Object.values(this.state.errors).forEach(\n            (error) => {\n                if (error.length > 0) {\n                    errorsCount++;\n                }\n            });\n        return(window.open(\"https://bit.ly/3f1wfcu\"))\n      }\n   \n    render() {\n        const {errors, formValid} = this.state;\n        return (\n            <form onSubmit={this.handleSubmit} noValidate>\n                <h3>Sign Up</h3>\n\n                <div className=\"form-group\">\n                    <label>First name</label>\n                    <input type=\"text\"\n                    name=\"firstName\"\n                    className=\"form-control\" \n                    placeholder=\"First name\"\n                    onChange={this.handleChange} noValidate />\n                    {errors.firstName.length > 0 && \n                        <div className='error text-danger text-center'>{errors.firstName}</div>}\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Last name</label>\n                    <input type=\"text\"\n                    name=\"lastName\"\n                    className=\"form-control\" \n                    placeholder=\"Last name\"\n                    onChange={this.handleChange} noValidate />\n                    {errors.lastName.length > 0 && \n                        <div className='error text-danger text-center'>{errors.lastName}</div>}\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input type='email' name='email' className=\"form-control\"\n                         placeholder=\"Enter email\" \n                         onChange={this.handleChange} noValidate />\n                    {errors.email.length > 0 && \n                        <div className='error text-danger text-center'>{errors.email}</div>}\n                </div>\n\n                <div className='form-group'>\n                    <label htmlFor=\"password\">Password</label>\n                    <input type='password' name='password' className=\"form-control\"\n                           placeholder=\"Enter password\"\n                           onChange={this.handleChange} noValidate />\n                    {errors.password.length > 0 && \n                        <span className='error text-danger text-center'>{errors.password}</span>}\n                </div>\n                \n                <div className=\"form-group\">\n                    <label>Confirm Password</label>\n                    <input type=\"password\"\n                        name=\"passwordConfirm\"\n                        placeholder=\"Enter password\"\n                        className=\"form-control\"  \n                        placeholder=\"Confirm password\"\n                        onChange={this.handleChange} noValidate  />\n                        {errors.passwordConfirm.length > 0 && \n                    <span className='error text-danger text-center'>{errors.passwordConfirm}</span>}\n                </div>\n                \n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n            </form>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Link } from \"react-router-dom\";\n// import ReactPasswordStrength from \"react-password-strength\"\n\nexport default class Header extends Component {\n    render() {\n        return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n            <Link className=\"navbar-brand\" to={\"https://bit.ly/3f1wfcu\"}>\n                <div className=\"text-black\">JSP Summer Camp 2020</div>\n            </Link>\n        </div>\n    </nav>\n        )\n    }\n}","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SignUp from \"./components/signup.component\";\nimport Header from \"./components/header.component\";\n\nfunction App() {\n  return (\n  <Router>\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={Header} />\n      </Switch>\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Switch>\n            <Route exact path='/' component={SignUp} />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}